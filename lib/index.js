// Generated by CoffeeScript 2.5.1
(function() {
  'use strict';
  var ClosureCompiler, compiler, fs, getNativeImagePath;

  fs = require('fs');

  compiler = require('google-closure-compiler').compiler;

  ({getNativeImagePath} = require('google-closure-compiler/lib/utils.js'));

  module.exports = ClosureCompiler = (function() {
    class ClosureCompiler {
      constructor(config) {
        var ref;
        this.optimize = this.optimize.bind(this);
        this.config = Object.assign(this.defaultFlags, (config != null ? (ref = config.plugins) != null ? ref.closurecompiler : void 0 : void 0) || {});
      }

      optimize(file) {
        var closureCompiler, flags;
        flags = {
          compilation_level: this.config.compilationLevel,
          js: file.path
        };
        if (this.config.createSourceMap) {
          flags.create_source_map = `${file.path}.map`;
        }
        closureCompiler = new compiler(flags);
        closureCompiler.JAR_PATH = null;
        closureCompiler.javaPath = getNativeImagePath();
        return new Promise((resolve, reject) => {
          return closureCompiler.run((exitCode, stdOut, stdErr) => {
            var result;
            if (exitCode !== 0) {
              return reject(new Error(`Google Closure Compiler exit ${exitCode}: ${stdErr}`));
            } else {
              result = {
                data: stdOut
              };
              if (this.config.createSourceMap) {
                result.map = fs.readFileSync(`${file.path}.map`, 'utf-8');
              }
              return resolve(result);
            }
          });
        });
      }

    };

    ClosureCompiler.prototype.brunchPlugin = true;

    ClosureCompiler.prototype.defaultFlags = {
      compilationLevel: 'SIMPLE',
      createSourceMap: true
    };

    return ClosureCompiler;

  }).call(this);

}).call(this);
